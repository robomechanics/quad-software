# generated from rosidl_generator_py/resource/_idl.py.em
# with input from quad_msgs:msg/MotorCommand.idl
# generated code does not contain a copyright notice

# This is being done at the module level and not on the instance level to avoid looking
# for the same variable multiple times on each instance. This variable is not supposed to
# change during runtime so it makes sense to only look for it once.
from os import getenv

ros_python_check_fields = getenv('ROS_PYTHON_CHECK_FIELDS', default='')


# Import statements for member types

import builtins  # noqa: E402, I100

import math  # noqa: E402, I100

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_MotorCommand(type):
    """Metaclass of message 'MotorCommand'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('quad_msgs')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'quad_msgs.msg.MotorCommand')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__motor_command
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__motor_command
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__motor_command
            cls._TYPE_SUPPORT = module.type_support_msg__msg__motor_command
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__motor_command

            from std_msgs.msg import Header
            if Header.__class__._TYPE_SUPPORT is None:
                Header.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class MotorCommand(metaclass=Metaclass_MotorCommand):
    """Message class 'MotorCommand'."""

    __slots__ = [
        '_header',
        '_pos_setpoint',
        '_vel_setpoint',
        '_kp',
        '_kd',
        '_torque_ff',
        '_pos_component',
        '_vel_component',
        '_fb_component',
        '_effort',
        '_fb_ratio',
        '_check_fields',
    ]

    _fields_and_field_types = {
        'header': 'std_msgs/Header',
        'pos_setpoint': 'double',
        'vel_setpoint': 'double',
        'kp': 'float',
        'kd': 'float',
        'torque_ff': 'double',
        'pos_component': 'double',
        'vel_component': 'double',
        'fb_component': 'double',
        'effort': 'double',
        'fb_ratio': 'double',
    }

    # This attribute is used to store an rosidl_parser.definition variable
    # related to the data type of each of the components the message.
    SLOT_TYPES = (
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Header'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        if 'check_fields' in kwargs:
            self._check_fields = kwargs['check_fields']
        else:
            self._check_fields = ros_python_check_fields == '1'
        if self._check_fields:
            assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
                'Invalid arguments passed to constructor: %s' % \
                ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        from std_msgs.msg import Header
        self.header = kwargs.get('header', Header())
        self.pos_setpoint = kwargs.get('pos_setpoint', float())
        self.vel_setpoint = kwargs.get('vel_setpoint', float())
        self.kp = kwargs.get('kp', float())
        self.kd = kwargs.get('kd', float())
        self.torque_ff = kwargs.get('torque_ff', float())
        self.pos_component = kwargs.get('pos_component', float())
        self.vel_component = kwargs.get('vel_component', float())
        self.fb_component = kwargs.get('fb_component', float())
        self.effort = kwargs.get('effort', float())
        self.fb_ratio = kwargs.get('fb_ratio', float())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.get_fields_and_field_types().keys(), self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    if self._check_fields:
                        assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.header != other.header:
            return False
        if self.pos_setpoint != other.pos_setpoint:
            return False
        if self.vel_setpoint != other.vel_setpoint:
            return False
        if self.kp != other.kp:
            return False
        if self.kd != other.kd:
            return False
        if self.torque_ff != other.torque_ff:
            return False
        if self.pos_component != other.pos_component:
            return False
        if self.vel_component != other.vel_component:
            return False
        if self.fb_component != other.fb_component:
            return False
        if self.effort != other.effort:
            return False
        if self.fb_ratio != other.fb_ratio:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @builtins.property
    def header(self):
        """Message field 'header'."""
        return self._header

    @header.setter
    def header(self, value):
        if self._check_fields:
            from std_msgs.msg import Header
            assert \
                isinstance(value, Header), \
                "The 'header' field must be a sub message of type 'Header'"
        self._header = value

    @builtins.property
    def pos_setpoint(self):
        """Message field 'pos_setpoint'."""
        return self._pos_setpoint

    @pos_setpoint.setter
    def pos_setpoint(self, value):
        if self._check_fields:
            assert \
                isinstance(value, float), \
                "The 'pos_setpoint' field must be of type 'float'"
            assert not (value < -1.7976931348623157e+308 or value > 1.7976931348623157e+308) or math.isinf(value), \
                "The 'pos_setpoint' field must be a double in [-1.7976931348623157e+308, 1.7976931348623157e+308]"
        self._pos_setpoint = value

    @builtins.property
    def vel_setpoint(self):
        """Message field 'vel_setpoint'."""
        return self._vel_setpoint

    @vel_setpoint.setter
    def vel_setpoint(self, value):
        if self._check_fields:
            assert \
                isinstance(value, float), \
                "The 'vel_setpoint' field must be of type 'float'"
            assert not (value < -1.7976931348623157e+308 or value > 1.7976931348623157e+308) or math.isinf(value), \
                "The 'vel_setpoint' field must be a double in [-1.7976931348623157e+308, 1.7976931348623157e+308]"
        self._vel_setpoint = value

    @builtins.property
    def kp(self):
        """Message field 'kp'."""
        return self._kp

    @kp.setter
    def kp(self, value):
        if self._check_fields:
            assert \
                isinstance(value, float), \
                "The 'kp' field must be of type 'float'"
            assert not (value < -3.402823466e+38 or value > 3.402823466e+38) or math.isinf(value), \
                "The 'kp' field must be a float in [-3.402823466e+38, 3.402823466e+38]"
        self._kp = value

    @builtins.property
    def kd(self):
        """Message field 'kd'."""
        return self._kd

    @kd.setter
    def kd(self, value):
        if self._check_fields:
            assert \
                isinstance(value, float), \
                "The 'kd' field must be of type 'float'"
            assert not (value < -3.402823466e+38 or value > 3.402823466e+38) or math.isinf(value), \
                "The 'kd' field must be a float in [-3.402823466e+38, 3.402823466e+38]"
        self._kd = value

    @builtins.property
    def torque_ff(self):
        """Message field 'torque_ff'."""
        return self._torque_ff

    @torque_ff.setter
    def torque_ff(self, value):
        if self._check_fields:
            assert \
                isinstance(value, float), \
                "The 'torque_ff' field must be of type 'float'"
            assert not (value < -1.7976931348623157e+308 or value > 1.7976931348623157e+308) or math.isinf(value), \
                "The 'torque_ff' field must be a double in [-1.7976931348623157e+308, 1.7976931348623157e+308]"
        self._torque_ff = value

    @builtins.property
    def pos_component(self):
        """Message field 'pos_component'."""
        return self._pos_component

    @pos_component.setter
    def pos_component(self, value):
        if self._check_fields:
            assert \
                isinstance(value, float), \
                "The 'pos_component' field must be of type 'float'"
            assert not (value < -1.7976931348623157e+308 or value > 1.7976931348623157e+308) or math.isinf(value), \
                "The 'pos_component' field must be a double in [-1.7976931348623157e+308, 1.7976931348623157e+308]"
        self._pos_component = value

    @builtins.property
    def vel_component(self):
        """Message field 'vel_component'."""
        return self._vel_component

    @vel_component.setter
    def vel_component(self, value):
        if self._check_fields:
            assert \
                isinstance(value, float), \
                "The 'vel_component' field must be of type 'float'"
            assert not (value < -1.7976931348623157e+308 or value > 1.7976931348623157e+308) or math.isinf(value), \
                "The 'vel_component' field must be a double in [-1.7976931348623157e+308, 1.7976931348623157e+308]"
        self._vel_component = value

    @builtins.property
    def fb_component(self):
        """Message field 'fb_component'."""
        return self._fb_component

    @fb_component.setter
    def fb_component(self, value):
        if self._check_fields:
            assert \
                isinstance(value, float), \
                "The 'fb_component' field must be of type 'float'"
            assert not (value < -1.7976931348623157e+308 or value > 1.7976931348623157e+308) or math.isinf(value), \
                "The 'fb_component' field must be a double in [-1.7976931348623157e+308, 1.7976931348623157e+308]"
        self._fb_component = value

    @builtins.property
    def effort(self):
        """Message field 'effort'."""
        return self._effort

    @effort.setter
    def effort(self, value):
        if self._check_fields:
            assert \
                isinstance(value, float), \
                "The 'effort' field must be of type 'float'"
            assert not (value < -1.7976931348623157e+308 or value > 1.7976931348623157e+308) or math.isinf(value), \
                "The 'effort' field must be a double in [-1.7976931348623157e+308, 1.7976931348623157e+308]"
        self._effort = value

    @builtins.property
    def fb_ratio(self):
        """Message field 'fb_ratio'."""
        return self._fb_ratio

    @fb_ratio.setter
    def fb_ratio(self, value):
        if self._check_fields:
            assert \
                isinstance(value, float), \
                "The 'fb_ratio' field must be of type 'float'"
            assert not (value < -1.7976931348623157e+308 or value > 1.7976931348623157e+308) or math.isinf(value), \
                "The 'fb_ratio' field must be a double in [-1.7976931348623157e+308, 1.7976931348623157e+308]"
        self._fb_ratio = value
