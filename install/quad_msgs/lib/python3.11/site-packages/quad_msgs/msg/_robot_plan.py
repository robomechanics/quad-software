# generated from rosidl_generator_py/resource/_idl.py.em
# with input from quad_msgs:msg/RobotPlan.idl
# generated code does not contain a copyright notice

# This is being done at the module level and not on the instance level to avoid looking
# for the same variable multiple times on each instance. This variable is not supposed to
# change during runtime so it makes sense to only look for it once.
from os import getenv

ros_python_check_fields = getenv('ROS_PYTHON_CHECK_FIELDS', default='')


# Import statements for member types

# Member 'plan_indices'
# Member 'primitive_ids'
import array  # noqa: E402, I100

import builtins  # noqa: E402, I100

import math  # noqa: E402, I100

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_RobotPlan(type):
    """Metaclass of message 'RobotPlan'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('quad_msgs')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'quad_msgs.msg.RobotPlan')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__robot_plan
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__robot_plan
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__robot_plan
            cls._TYPE_SUPPORT = module.type_support_msg__msg__robot_plan
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__robot_plan

            from builtin_interfaces.msg import Time
            if Time.__class__._TYPE_SUPPORT is None:
                Time.__class__.__import_type_support__()

            from quad_msgs.msg import GRFArray
            if GRFArray.__class__._TYPE_SUPPORT is None:
                GRFArray.__class__.__import_type_support__()

            from quad_msgs.msg import RobotPlanDiagnostics
            if RobotPlanDiagnostics.__class__._TYPE_SUPPORT is None:
                RobotPlanDiagnostics.__class__.__import_type_support__()

            from quad_msgs.msg import RobotState
            if RobotState.__class__._TYPE_SUPPORT is None:
                RobotState.__class__.__import_type_support__()

            from std_msgs.msg import Header
            if Header.__class__._TYPE_SUPPORT is None:
                Header.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class RobotPlan(metaclass=Metaclass_RobotPlan):
    """Message class 'RobotPlan'."""

    __slots__ = [
        '_header',
        '_global_plan_timestamp',
        '_state_timestamp',
        '_states',
        '_grfs',
        '_plan_indices',
        '_primitive_ids',
        '_compute_time',
        '_diagnostics',
        '_check_fields',
    ]

    _fields_and_field_types = {
        'header': 'std_msgs/Header',
        'global_plan_timestamp': 'builtin_interfaces/Time',
        'state_timestamp': 'builtin_interfaces/Time',
        'states': 'sequence<quad_msgs/RobotState>',
        'grfs': 'sequence<quad_msgs/GRFArray>',
        'plan_indices': 'sequence<uint32>',
        'primitive_ids': 'sequence<uint32>',
        'compute_time': 'double',
        'diagnostics': 'quad_msgs/RobotPlanDiagnostics',
    }

    # This attribute is used to store an rosidl_parser.definition variable
    # related to the data type of each of the components the message.
    SLOT_TYPES = (
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Header'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['builtin_interfaces', 'msg'], 'Time'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['builtin_interfaces', 'msg'], 'Time'),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['quad_msgs', 'msg'], 'RobotState')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['quad_msgs', 'msg'], 'GRFArray')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('uint32')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('uint32')),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['quad_msgs', 'msg'], 'RobotPlanDiagnostics'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        if 'check_fields' in kwargs:
            self._check_fields = kwargs['check_fields']
        else:
            self._check_fields = ros_python_check_fields == '1'
        if self._check_fields:
            assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
                'Invalid arguments passed to constructor: %s' % \
                ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        from std_msgs.msg import Header
        self.header = kwargs.get('header', Header())
        from builtin_interfaces.msg import Time
        self.global_plan_timestamp = kwargs.get('global_plan_timestamp', Time())
        from builtin_interfaces.msg import Time
        self.state_timestamp = kwargs.get('state_timestamp', Time())
        self.states = kwargs.get('states', [])
        self.grfs = kwargs.get('grfs', [])
        self.plan_indices = array.array('I', kwargs.get('plan_indices', []))
        self.primitive_ids = array.array('I', kwargs.get('primitive_ids', []))
        self.compute_time = kwargs.get('compute_time', float())
        from quad_msgs.msg import RobotPlanDiagnostics
        self.diagnostics = kwargs.get('diagnostics', RobotPlanDiagnostics())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.get_fields_and_field_types().keys(), self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    if self._check_fields:
                        assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.header != other.header:
            return False
        if self.global_plan_timestamp != other.global_plan_timestamp:
            return False
        if self.state_timestamp != other.state_timestamp:
            return False
        if self.states != other.states:
            return False
        if self.grfs != other.grfs:
            return False
        if self.plan_indices != other.plan_indices:
            return False
        if self.primitive_ids != other.primitive_ids:
            return False
        if self.compute_time != other.compute_time:
            return False
        if self.diagnostics != other.diagnostics:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @builtins.property
    def header(self):
        """Message field 'header'."""
        return self._header

    @header.setter
    def header(self, value):
        if self._check_fields:
            from std_msgs.msg import Header
            assert \
                isinstance(value, Header), \
                "The 'header' field must be a sub message of type 'Header'"
        self._header = value

    @builtins.property
    def global_plan_timestamp(self):
        """Message field 'global_plan_timestamp'."""
        return self._global_plan_timestamp

    @global_plan_timestamp.setter
    def global_plan_timestamp(self, value):
        if self._check_fields:
            from builtin_interfaces.msg import Time
            assert \
                isinstance(value, Time), \
                "The 'global_plan_timestamp' field must be a sub message of type 'Time'"
        self._global_plan_timestamp = value

    @builtins.property
    def state_timestamp(self):
        """Message field 'state_timestamp'."""
        return self._state_timestamp

    @state_timestamp.setter
    def state_timestamp(self, value):
        if self._check_fields:
            from builtin_interfaces.msg import Time
            assert \
                isinstance(value, Time), \
                "The 'state_timestamp' field must be a sub message of type 'Time'"
        self._state_timestamp = value

    @builtins.property
    def states(self):
        """Message field 'states'."""
        return self._states

    @states.setter
    def states(self, value):
        if self._check_fields:
            from quad_msgs.msg import RobotState
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, RobotState) for v in value) and
                 True), \
                "The 'states' field must be a set or sequence and each value of type 'RobotState'"
        self._states = value

    @builtins.property
    def grfs(self):
        """Message field 'grfs'."""
        return self._grfs

    @grfs.setter
    def grfs(self, value):
        if self._check_fields:
            from quad_msgs.msg import GRFArray
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, GRFArray) for v in value) and
                 True), \
                "The 'grfs' field must be a set or sequence and each value of type 'GRFArray'"
        self._grfs = value

    @builtins.property
    def plan_indices(self):
        """Message field 'plan_indices'."""
        return self._plan_indices

    @plan_indices.setter
    def plan_indices(self, value):
        if self._check_fields:
            if isinstance(value, array.array):
                assert value.typecode == 'I', \
                    "The 'plan_indices' array.array() must have the type code of 'I'"
                self._plan_indices = value
                return
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, int) for v in value) and
                 all(val >= 0 and val < 4294967296 for val in value)), \
                "The 'plan_indices' field must be a set or sequence and each value of type 'int' and each unsigned integer in [0, 4294967295]"
        self._plan_indices = array.array('I', value)

    @builtins.property
    def primitive_ids(self):
        """Message field 'primitive_ids'."""
        return self._primitive_ids

    @primitive_ids.setter
    def primitive_ids(self, value):
        if self._check_fields:
            if isinstance(value, array.array):
                assert value.typecode == 'I', \
                    "The 'primitive_ids' array.array() must have the type code of 'I'"
                self._primitive_ids = value
                return
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, int) for v in value) and
                 all(val >= 0 and val < 4294967296 for val in value)), \
                "The 'primitive_ids' field must be a set or sequence and each value of type 'int' and each unsigned integer in [0, 4294967295]"
        self._primitive_ids = array.array('I', value)

    @builtins.property
    def compute_time(self):
        """Message field 'compute_time'."""
        return self._compute_time

    @compute_time.setter
    def compute_time(self, value):
        if self._check_fields:
            assert \
                isinstance(value, float), \
                "The 'compute_time' field must be of type 'float'"
            assert not (value < -1.7976931348623157e+308 or value > 1.7976931348623157e+308) or math.isinf(value), \
                "The 'compute_time' field must be a double in [-1.7976931348623157e+308, 1.7976931348623157e+308]"
        self._compute_time = value

    @builtins.property
    def diagnostics(self):
        """Message field 'diagnostics'."""
        return self._diagnostics

    @diagnostics.setter
    def diagnostics(self, value):
        if self._check_fields:
            from quad_msgs.msg import RobotPlanDiagnostics
            assert \
                isinstance(value, RobotPlanDiagnostics), \
                "The 'diagnostics' field must be a sub message of type 'RobotPlanDiagnostics'"
        self._diagnostics = value
