# generated from rosidl_generator_py/resource/_idl.py.em
# with input from quad_msgs:msg/RobotPlanDiagnostics.idl
# generated code does not contain a copyright notice

# This is being done at the module level and not on the instance level to avoid looking
# for the same variable multiple times on each instance. This variable is not supposed to
# change during runtime so it makes sense to only look for it once.
from os import getenv

ros_python_check_fields = getenv('ROS_PYTHON_CHECK_FIELDS', default='')


# Import statements for member types

# Member 'complexity_schedule'
# Member 'element_times'
import array  # noqa: E402, I100

import builtins  # noqa: E402, I100

import math  # noqa: E402, I100

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_RobotPlanDiagnostics(type):
    """Metaclass of message 'RobotPlanDiagnostics'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('quad_msgs')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'quad_msgs.msg.RobotPlanDiagnostics')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__robot_plan_diagnostics
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__robot_plan_diagnostics
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__robot_plan_diagnostics
            cls._TYPE_SUPPORT = module.type_support_msg__msg__robot_plan_diagnostics
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__robot_plan_diagnostics

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class RobotPlanDiagnostics(metaclass=Metaclass_RobotPlanDiagnostics):
    """Message class 'RobotPlanDiagnostics'."""

    __slots__ = [
        '_compute_time',
        '_cost',
        '_iterations',
        '_horizon_length',
        '_complexity_schedule',
        '_element_times',
        '_check_fields',
    ]

    _fields_and_field_types = {
        'compute_time': 'double',
        'cost': 'double',
        'iterations': 'uint32',
        'horizon_length': 'uint32',
        'complexity_schedule': 'sequence<uint32>',
        'element_times': 'sequence<double>',
    }

    # This attribute is used to store an rosidl_parser.definition variable
    # related to the data type of each of the components the message.
    SLOT_TYPES = (
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint32'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint32'),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('uint32')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('double')),  # noqa: E501
    )

    def __init__(self, **kwargs):
        if 'check_fields' in kwargs:
            self._check_fields = kwargs['check_fields']
        else:
            self._check_fields = ros_python_check_fields == '1'
        if self._check_fields:
            assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
                'Invalid arguments passed to constructor: %s' % \
                ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.compute_time = kwargs.get('compute_time', float())
        self.cost = kwargs.get('cost', float())
        self.iterations = kwargs.get('iterations', int())
        self.horizon_length = kwargs.get('horizon_length', int())
        self.complexity_schedule = array.array('I', kwargs.get('complexity_schedule', []))
        self.element_times = array.array('d', kwargs.get('element_times', []))

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.get_fields_and_field_types().keys(), self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    if self._check_fields:
                        assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.compute_time != other.compute_time:
            return False
        if self.cost != other.cost:
            return False
        if self.iterations != other.iterations:
            return False
        if self.horizon_length != other.horizon_length:
            return False
        if self.complexity_schedule != other.complexity_schedule:
            return False
        if self.element_times != other.element_times:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @builtins.property
    def compute_time(self):
        """Message field 'compute_time'."""
        return self._compute_time

    @compute_time.setter
    def compute_time(self, value):
        if self._check_fields:
            assert \
                isinstance(value, float), \
                "The 'compute_time' field must be of type 'float'"
            assert not (value < -1.7976931348623157e+308 or value > 1.7976931348623157e+308) or math.isinf(value), \
                "The 'compute_time' field must be a double in [-1.7976931348623157e+308, 1.7976931348623157e+308]"
        self._compute_time = value

    @builtins.property
    def cost(self):
        """Message field 'cost'."""
        return self._cost

    @cost.setter
    def cost(self, value):
        if self._check_fields:
            assert \
                isinstance(value, float), \
                "The 'cost' field must be of type 'float'"
            assert not (value < -1.7976931348623157e+308 or value > 1.7976931348623157e+308) or math.isinf(value), \
                "The 'cost' field must be a double in [-1.7976931348623157e+308, 1.7976931348623157e+308]"
        self._cost = value

    @builtins.property
    def iterations(self):
        """Message field 'iterations'."""
        return self._iterations

    @iterations.setter
    def iterations(self, value):
        if self._check_fields:
            assert \
                isinstance(value, int), \
                "The 'iterations' field must be of type 'int'"
            assert value >= 0 and value < 4294967296, \
                "The 'iterations' field must be an unsigned integer in [0, 4294967295]"
        self._iterations = value

    @builtins.property
    def horizon_length(self):
        """Message field 'horizon_length'."""
        return self._horizon_length

    @horizon_length.setter
    def horizon_length(self, value):
        if self._check_fields:
            assert \
                isinstance(value, int), \
                "The 'horizon_length' field must be of type 'int'"
            assert value >= 0 and value < 4294967296, \
                "The 'horizon_length' field must be an unsigned integer in [0, 4294967295]"
        self._horizon_length = value

    @builtins.property
    def complexity_schedule(self):
        """Message field 'complexity_schedule'."""
        return self._complexity_schedule

    @complexity_schedule.setter
    def complexity_schedule(self, value):
        if self._check_fields:
            if isinstance(value, array.array):
                assert value.typecode == 'I', \
                    "The 'complexity_schedule' array.array() must have the type code of 'I'"
                self._complexity_schedule = value
                return
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, int) for v in value) and
                 all(val >= 0 and val < 4294967296 for val in value)), \
                "The 'complexity_schedule' field must be a set or sequence and each value of type 'int' and each unsigned integer in [0, 4294967295]"
        self._complexity_schedule = array.array('I', value)

    @builtins.property
    def element_times(self):
        """Message field 'element_times'."""
        return self._element_times

    @element_times.setter
    def element_times(self, value):
        if self._check_fields:
            if isinstance(value, array.array):
                assert value.typecode == 'd', \
                    "The 'element_times' array.array() must have the type code of 'd'"
                self._element_times = value
                return
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, float) for v in value) and
                 all(not (val < -1.7976931348623157e+308 or val > 1.7976931348623157e+308) or math.isinf(val) for val in value)), \
                "The 'element_times' field must be a set or sequence and each value of type 'float' and each double in [-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000]"
        self._element_times = array.array('d', value)
